# Establece la cantidad de WOKER PROCCESSES que NGINX debe iniciar --> Procesan solicitudes (CLIENTE)
# La cantidad asignada es igual a la efectividad de NGINX de manejar las solicitudes --> + worker_processes + request
# Es recomendabel establecer un valor igual al numero de CPS's del servidor
# Podemos darle el valor de *auto*, y dejar que nginx decida
worker_processes 1;

events {
	# Establecemos las conexiones simult√°neas
	# Sete las conexiones que los procesos puedan manejar
	# Puede afectar a la memoria debido a la cantidad de conexiones disponibles
	worker_connections 1024;
}
# Logica para el manejo del trafico que provenga desde el cliente --> MAIN CONFIGURATION
http {
	# Inclu√≠mos el tipo de archivo en la respuesta al CLIENTE
	# Esto es para que el navegador o CLIENTE puede ver el tipo en el HEADER de la respuesta
	# Ayuda en el manejo del recibimiento por parte del CLIENTE
	include mime.types;
	# Definimos y le damos un nombre al *upstream* ‚úÖ
	upstream nodejs_cluster {
		# Listamos los BACKEND o SERVERS que NODE deberia seguir, o utilizar como UPSTREAM
		# Recordemos que estamos en el desarrollo local
		# por lo tanto la direcci√≥n sera esta
		# Son 3 servidores, es por eso que son 3 direcciones üåê
		# Con *least_conn*, se encargar√° de enviar las peticiones al SERVER con menos conexiones
		# esto pensando en las 3 replicas que tenemos en este ejemplo-
		least_conn;
        server 127.0.0.1:3001;
		server 127.0.0.1:3002;
		server 127.0.0.1:3003;
	}

    server {
		# Puerto estandar para el desarrollo local
		# El puerto por defecto con certificado HTTPS local es *443 ssl*
		listen 8080;
		# Donde el cliente envia las REQUESTS
		server_name localhost;
        
		# Public key
		ssl_certificate /home/radamantium/nginx-certs/nginx-selfsigned.crt; 
		# Private key
		ssl_certificate_key /home/radamantium/nginx-certs/nginx-selfsigned.key;
        
		# La URL de la ubiaci√≥n del CLIENTE
		# Le decimos a NGINX que envie las solicitudes a los BACKENDS que creamos
		location / {
			# Configuramos a NGINX para que sea un PROXY SERVER --> REVERSE PROXY ‚úÖ
			# Envia el trafico a las aplicaciones backend NODE
			# Le tenemos que pasar el UPSTREAM, hacemos referencia al nombre que le pusimos mas arriba ‚¨ÜÔ∏è
			# Usamos el protocolo http
            proxy_pass http://nodejs_cluster;
			# Conf. para que los BACKEND vean la solicitud por parte del CLIENTE
			# Es importantes para que los BACKEND's puedan hacer el enrrutamiento adecuado
			# NGINX va a alamacenar un valor en la variable *$host*
			# Se puede establecer muchos HEADERS en el PROXY ‚ùó
			proxy_set_header Host $http_host;
			# Exponemos solo la IP de NGINX, y no la del SERVER
			# Es muy importante para las cuestiones de seguridad en AUTH‚ùóüîí
			# Utilizamos la variable $remote_addr
			proxy_set_header X-Real-IP $remote_addr;
		}

    # A√±adimos este contexto para redirigir con el codigo 301
	# hacia la conexi√≥n segura con HTTPS certificate
	server {
		listen 8080;
		server_name localhost;

		location / {
			return 301 https://$http_host$request_uri
		}
	}
	}
}


